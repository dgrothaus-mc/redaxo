name: E2E Tests

on: pull_request

env:
    writable: ${{ (github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]') && 1 || 0 }}
    node_version: 18
    snapshot_files_pattern: .github/e2e/tests/**/*.png
    e2e_working_directory: .github/e2e
    # skip downloading playwright browsers since we download them manually when required
    # https://playwright.dev/docs/browsers#skip-browser-downloads
    PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: true

concurrency:
    # cancel in-progress jobs if a new job is trigged by a commit from the same branch
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#concurrency
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    # job: prepare the environment to run e2e tests
    e2e-prepare:
        name: Prepare E2E tests
        runs-on: ubuntu-latest
        # map step outputs to job outputs, so that the data can be used in upcoming jobs
        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idoutputs
        outputs:
            playwright_version_hash: ${{ steps.all-envs.outputs.playwright_version_hash }}
            os_version: ${{ steps.all-envs.outputs.os_version }}
            run_was_triggered_by_autocommit: ${{ steps.all-envs.outputs.run_was_triggered_by_autocommit }}

        steps:
            -   name: Checkout repository
                uses: actions/checkout@v3
                with:
                    # ref is required for pull requests
                    ref: ${{ github.head_ref }}

            -   name: Set up Node ${{ env.node_version }}
                uses: actions/setup-node@v3
                with:
                    node-version: ${{ env.node_version }}
                    # cache all packages as specified in lockfile
                    cache: "npm"
                    cache-dependency-path: ${{ env.e2e_working_directory }}/package-lock.json

            -   name: Prepare environment variables üçø
                # save some variables we need for processing later on
                run: |
                    echo "commit_subject=$(git log -1 --format=%s ${{ github.event.pull_request.head.sha }})" >> $GITHUB_ENV
                    echo "playwright_version_hash=$(printf `npm ls playwright --package-lock-only --prefix=${{ env.e2e_working_directory }} | shasum`)" >> $GITHUB_ENV
                    echo "os_version=$(lsb_release -sr)" >> $GITHUB_ENV

            -   name: Check if workflow run was triggerd by auto-commit üëª
                # if commit subject contains marker [CI_1], the workflow run was triggered by an auto-commit.
                # however, we also check for 'revert', since we DO want to run a workflow if just an auto-commit was reverted.
                run: |
                    if ${{ contains(env.commit_subject, '[CI_1]') && !contains(env.commit_subject, 'revert') }}; then
                        echo "run_was_triggered_by_autocommit=true" >> $GITHUB_ENV
                    fi

            -   name: Cache node_modules ‚ôªÔ∏è
                id: node-modules-cache
                uses: actions/cache@v3
                with:
                    path: ${{ env.e2e_working_directory }}/node_modules
                    key: node-modules-${{ runner.os }}-${{ hashFiles('${{ env.e2e_working_directory }}/package-lock.json') }}

            -   name: Install packages üêøÔ∏èüéí
                # install packages only if node_modules cache is missing
                if: ${{ steps.node-modules-cache.outputs.cache-hit != 'true' }}
                run: npm ci --audit=false --prefix=${{ env.e2e_working_directory }}

            -   name: Cache Playwright browsers ‚ôªÔ∏è
                uses: actions/cache@v3
                id: playwright-cache
                with:
                    path: ~/.cache/ms-playwright
                    key: playwright-${{ runner.os }}-${{ env.os_version }}-${{ env.playwright_version_hash }}

            -   name: Install playwright browsers (without system dependencies) üêøÔ∏èüéí
                if: ${{ steps.playwright-cache.outputs.cache-hit != 'true' }}
                # https://playwright.dev/docs/cli#install-browsers
                run: npx playwright install chromium webkit

            -   name: Create outputs for use in dependent jobs üçø
                # create step outputs and let them be aggregated when this job is finished (see above)
                # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idoutputs
                id: all-envs
                run: |
                    echo "::set-output name=playwright_version_hash::${{ env.playwright_version_hash }}"
                    echo "::set-output name=os_version::${{ env.os_version }}"
                    echo "::set-output name=run_was_triggered_by_autocommit::${{ env.run_was_triggered_by_autocommit }}"

    # job: run multiple e2e tests
    e2e-runners:
        name: E2E test runners
        runs-on: ubuntu-latest
        needs: [e2e-prepare]
        # for performance reasons, do not run if workflow was triggered by auto-commit
        if: needs.e2e-prepare.outputs.run_was_triggered_by_autocommit != 'true'

        strategy:
            fail-fast: false
            matrix:
                # run parallel tests on multiple instances
                # see https://playwright.dev/docs/test-parallel#shard-tests-between-multiple-machines
                #
                # setup: tests REDAXO setup flow
                # serial: tests that modify REDAXO and therefore may only be executed serially
                # 1/2, 2/2, ‚Ä¶: self-contained parallel tests via playwright shard
                mode: [setup, serial, 1/3, 2/3, 3/3]

        steps:
            -   name: Checkout repository
                uses: actions/checkout@v3

            -   name: Set up PHP
                uses: shivammathur/setup-php@v2
                with:
                    php-version: "8.1"
                    ini-values: "error_reporting=E_ALL, display_errors=On, display_startup_errors=On"
                    extensions: gd, pdo_mysql
                    coverage: none # disable xdebug, pcov
                    tools: cs2pr

            -   name: Set up REDAXO
                run: |
                    sudo /etc/init.d/mysql start
                    mysql -uroot -h127.0.0.1 -proot -e 'create database redaxo5;'
                    git apply .github/workflows/default.config.yml.github-action.diff
                    php .tools/bin/setup

            -   name: Import mock data
                run: |
                    mkdir -p $GITHUB_WORKSPACE/redaxo/data/addons/backup && cp -r .github/imports/inital-content-for-visual-tests.sql $GITHUB_WORKSPACE/redaxo/data/addons/backup/
                    cp -r .github/imports/media/* $GITHUB_WORKSPACE/media/
                    cp -f .github/imports/README.md $GITHUB_WORKSPACE/redaxo/src/addons/project/README.de.md
                    php redaxo/bin/console config:set error_email 'test@redaxo.invalid' --ansi
                    php redaxo/bin/console config:set instname 'rex20210101000000' --ansi
                    php redaxo/bin/console config:set debug.enabled false -t boolean --ansi
                    php redaxo/bin/console setup:run -n --lang=de_de --agree-license --db-password=root --db-setup=import --db-import=inital-content-for-visual-tests --admin-username=admin --admin-password=admin123 --ansi
                    php redaxo/bin/console user:create user user1234 --ansi

            -   name: Install packages
                run: |
                    php redaxo/bin/console package:install phpmailer --ansi
                    php redaxo/bin/console package:install cronjob --ansi
                    php redaxo/bin/console package:install cronjob/article_status --ansi
                    php redaxo/bin/console package:install cronjob/optimize_tables --ansi
                    php redaxo/bin/console package:install debug --ansi
                    php redaxo/bin/console package:install structure/history --ansi
                    php redaxo/bin/console package:install structure/version --ansi

            -   name: Enable REDAXO setup mode
                if: matrix.mode == 'setup'
                run: |
                    php redaxo/bin/console config:set setup true -t boolean --ansi
                    php redaxo/bin/console cache:clear --ansi

            -   name: Setup Webserver
                run: php -S localhost:8000 &

            -   name: Set up Node ${{ env.node_version }}
                uses: actions/setup-node@v3
                with:
                    node-version: ${{ env.node_version }}
                    # cache all packages as specified in lockfile
                    cache: "npm"
                    cache-dependency-path: ${{ env.e2e_working_directory }}/package-lock.json

            -   name: Restore node_modules from cache ‚ôªÔ∏è
                id: node-modules-cache
                uses: actions/cache@v3
                with:
                    path: ${{ env.e2e_working_directory }}/node_modules
                    key: node-modules-${{ runner.os }}-${{ hashFiles('${{ env.e2e_working_directory }}/package-lock.json') }}

            -   name: Install packages üêøÔ∏èüéí
                # install packages only if node_modules cache is missing
                if: ${{ steps.node-modules-cache.outputs.cache-hit != 'true' }}
                run: npm ci --audit=false --prefix=${{ env.e2e_working_directory }}

            -   name: Restore Playwright browsers from cache ‚ôªÔ∏è
                uses: actions/cache@v3
                id: playwright-cache
                with:
                    path: ~/.cache/ms-playwright
                    key: playwright-${{ runner.os }}-${{ needs.e2e-prepare.outputs.os_version }}-${{ needs.e2e-prepare.outputs.playwright_version_hash }}

            -   name: Install playwright browsers and system dependencies üêøÔ∏èüéí
                # browsers should already be cached (from e2e-prepare job before), so this step will be is fast.
                # unfortunately system dependencies cannot be cached and will take some time to install.
                # https://playwright.dev/docs/cli#install-system-dependencies
                run: npx playwright install --with-deps chromium webkit

            -   name: E2E tests üïπÔ∏è
                # run e2e tests, see package.json for details.
                # check for modified (M) and untracked (??) files afterwards
                run: |
                    case ${{ matrix.mode }} in
                        [1-9]/[1-9])
                            npm run test --prefix=${{ env.e2e_working_directory }} -- --shard=${{ matrix.mode }} ./tests/parallel/
                            ;;
                        *)
                            npm run test --prefix=${{ env.e2e_working_directory }} -- --workers=1 ./tests/${{ matrix.mode }}/
                            ;;
                    esac
                    if [[ -n $(git status -s -uall ${{ env.snapshot_files_pattern }} | grep "^ M\|^??") ]]; then
                        echo "has_changed_files=true" >> $GITHUB_ENV
                        exit 1;
                    fi

            -   name: Prepare artifact üì¶
                # prepare tar archive containing changed files
                # hint: we use `git status` to list changed files, grep all modified (M) and untracked (??),
                # cut off status infos and pipe each file to the tar archive
                if: failure() && env.has_changed_files
                run: git status -s -uall ${{ env.file_pattern }} | grep "^ M\|^??" | cut -c4- | xargs tar -cvf ${{ github.job }}.tar

            -   name: Save artifact üíæ
                # upload artifact containing changed files
                # hint: since github does not provide a list of artifacts, we prefix them with `ci-artifact-` for now
                # to be able to loop over them when downloaded again
                uses: actions/upload-artifact@v3
                if: failure() && env.has_changed_files
                with:
                    name: ci-artifact-${{ github.job }}-${{ strategy.job-index }}
                    path: ${{ env.e2e_working_directory }}/${{ github.job }}.tar
                    retention-days: 1

    # job: aggregate new e2e snapshots and auto-commit to the repo
    # hint: this job should be required and must not fail!
    e2e-tests:
        name: E2E tests
        runs-on: ubuntu-latest
        if: ${{ always() }}
        # requires all jobs to be finished that may have produced changed files or
        # that should not be canceled in-progress
        needs: [ e2e-prepare, e2e-runners ]
        env:
            was_autocommit: ${{ needs.e2e-prepare.outputs.run_was_triggered_by_autocommit || false }}

        steps:
            -   name: Checkout repository
                uses: actions/checkout@v3
                with:
                    # ref is required if auto-commit action is used in pull requests
                    # see https://github.com/stefanzweifel/git-auto-commit-action#checkout-the-correct-branch
                    ref: ${{ github.head_ref }}
                    # token is required to trigger new workflow runs after auto-commit action
                    # see https://github.com/stefanzweifel/git-auto-commit-action#commits-made-by-this-action-do-not-trigger-new-workflow-runs
                    token: ${{ secrets.BOT_TOKEN }}

            -   name: Load artifacts üíæ
                # download artifacts containing changed files
                if: env.was_autocommit != 'true'
                uses: actions/download-artifact@v3

            -   name: Extract artifacts üì¶
                # extract tar files contained in artifacts
                # hint: loop through the artifacts directories and extract the (one) contained tar, delete the
                # directories afterwards
                if: env.was_autocommit != 'true'
                run: |
                    for directory in ./ci-artifact-*; do
                        [ -d "$directory" ] || continue
                        echo "has_changed_files=true" >> $GITHUB_ENV
                        if [[ "$directory" == *"e2e"* ]]; then
                            echo "has_changed_e2e_files=true" >> $GITHUB_ENV
                        fi
                        tar -xvf "$directory"/*.tar
                        rm -rf "$directory"
                    done

            -   name: Update repository üëÄ
                # git pull to make sure the repo is not dirty
                if: env.has_changed_files && env.was_autocommit != 'true'
                run: git pull --ff-only

            -   name: Auto-commit changed files ü§ñ
                # automatically commit files which have been changed during the workflow run and push changes back
                # to remote repository. add a marker [CI_1] to commit subject so that subsequent jobs can check
                # whether they have been triggered by an auto-commit.
                if: env.has_changed_files && env.was_autocommit != 'true'
                uses: stefanzweifel/git-auto-commit-action@v4
                with:
                    commit_message: Update screenshots [CI_1]
                    commit_user_name: rex-bot
                    commit_user_email: rex-bot@users.noreply.github.com
                    file_pattern: ${{ env.snapshot_files_pattern }}

            -   name: Respond to new snapshots ü§ñ
                # leave a comment and add a label to current pull request to make the team aware of new E2E results
                if: env.has_changed_e2e_files && env.was_autocommit != 'true'
                uses: actions/github-script@v6
                with:
                    script: |
                        github.rest.issues.createComment({
                            issue_number: context.issue.number,
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            body: `üëãü§ñ New snapshots for you people. Plz review the <a href="${context.issue.number}/files?file-filters[]=.png">PNG files</a>!`
                        })
                        github.rest.issues.addLabels({
                            issue_number: context.issue.number,
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            labels: ['e2e review required']
                        })

            -   name: Fail after auto-commit üôã
                # let the job fail in case of auto-commit
                # hint: this job will be a required one, so a proper status is important!
                if: env.has_changed_files && env.was_autocommit != 'true'
                run: exit 1
